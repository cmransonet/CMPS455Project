// threadtest.cc 
//	Simple test case for the threads assignment.
//
//	Create two threads, and have them context switch
//	back and forth between themselves by calling Thread::Yield, 
//	to illustratethe inner workings of the thread system.
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"

int task = 0;

//----------------------------------------------------------------------
// SimpleThread
// 	Loop 5 times, yielding the CPU to another ready thread 
//	each iteration.
//
//	"which" is simply a number identifying the thread, for debugging
//	purposes.
//----------------------------------------------------------------------

void
SimpleThread(int which)
{
    int num;
    
    for (num = 0; num < 5; num++) {
	printf("*** thread %d looped %d times\n", which, num);
        currentThread->Yield();
    }
}


//----------------------------------------------------------------------
// ThreadTest
// 	Invoke a test routine.
//----------------------------------------------------------------------


//Begin code changes by Chet Ransonet

/*
void
ThreadTest()
{
    DEBUG('t', "Entering ThreadTest");

    Thread *t = new Thread("forked thread");

    t->Fork(SimpleThread, 1);
    SimpleThread(0);
}
*/

int InputCheck(char *input, int size)
{
	bool negative = false;
	bool decimal = false;
	bool charString = false;
	bool number = false;

	//loop through char array
	for (int i = 0; i < size; i = i + 1)
	{
		printf("%c",input[i]); 
		
		if (input[i] == '\n')
			break;

		else if (i == 0 && input[i] == '-')
			negative = true;

		else if (input[i] >= '0' && input[i] <= '9')
		{
			number = true;
			continue;
		}

		else if (input[i] == '.')
		{
			if (!number)
			{
				charString = true;
				//printf("\n%c broke the number, flag 1", input[i]);
				break;
			}

			else if (decimal == false)
			{
				decimal = true;
				number = false;
			}

			else
			{
				charString = true;
				//printf("\n%c broke the number, flag 2", input[i]);
				break;
			}
		}
					
		else 
		{
			charString = true;
			//printf("\n%c broke the number, flag 3", input[i]);
			break;
		}
	}

	printf("\n----------------------\n");

	//printf("charString: %i\n", charString);
	//printf("number: %i\n", number);
	//printf("decimal: %i\n", decimal);
	//printf("negative: %i\n", negative);

	if (charString || !number)
		return 0;
	else if (number)
	{	
		if (decimal)
		{
			if (negative)
				return -2;
			else
				return 2;
		}
		else
		{
			if (negative)
				return -1;
			else
				return 1;
		}
	}
	else
		return 0;

	printf("\n----------------------\n");
}


// Task 1: Input Identification
void Task1(int num)
{
	char input[256], c;
	int size = 0;

	printf("\n----------------------\n");

	printf("Task 1: Input Identification\n(max 256 characters, spaces count as characters!)\nType something: ");

	while ((c = getchar()) != '\n')
	{
		input[size] = c;
		size++;
	}

	int output = InputCheck(input, size);
	if (output == 0)
		printf("You entered a character string.");
	else if (output == 1)
		printf("You entered an integer.");
	else if (output == -1)
		printf("You entered a negative integer.");
	else if (output == 2)
		printf("You entered a decimal.");
	else if (output == -2)
		printf("You entered a negative decimal.");
	else
		printf("Invalid input.");

	printf("\n\n");

	currentThread->Finish();
}

typedef struct Packet
{
	int id;
	int shouts;
};

void Shout(int pack)
{
	Packet* p = (Packet*)pack;
	int phrase;
	int n = 0;
	while (n < p->shouts)
	{
		phrase = Random() % 3 + 2;
		n++;
		printf("Thread %i: ", p->id);	

		if (phrase == 0)
			printf("I like trains!");
		else if (phrase == 1)
			printf("The sky is blue!");
		else if (phrase == 2)
			printf("Why are we all shouting?!");
		else if (phrase == 3)
			printf("Shut up!");
		else if (phrase == 4)
			printf("I'm a unique, creative shout!");
		
		printf("\n");

		int cycles = Random() % 4 + 2;
		int i = 0;

		while(i < cycles)
		{
			currentThread->Yield();
			i++;
		}
	}

	currentThread->Finish();
}

// Task 2: Shouting Threads
void Task2(int num)
{
	int size = 0, inCheck = 0, threads, shouts;
	char input1[256], input2[256], c;

	printf("Task 2: Shouting Threads\n(max 256 characters, spaces count as characters!)\n");

	do
	{	
		size = 0;
		//memset(&input1[0], 0, 256);

		printf("\n----------------------\n");
		printf("How many threads? ");

		while ((c = getchar()) != '\n')
		{
			input1[size] = c;
			size++;
		}
		
		inCheck = InputCheck(input1, size);
		
		if (inCheck != 1)
			printf("Error: That's not a positive integer. Try again.\n ");
		else
			break;
	} 
	while (true);

	threads = atoi(input1);	
	size = 0;

	do
	{	
		size = 0;
		//memset(&input2[0], 0, 256);

		printf("\n----------------------\n");
		printf("How many shouts? ");

		while ((c = getchar()) != '\n')
		{
			input2[size] = c;
			size++;
		}
		
		inCheck = InputCheck(input2, size);

		if (inCheck != 1)
			printf("Error: That's not a positive integer. Try again.\n ");
		else
			break;
	}
	while (true);

	shouts = atoi(input2);
	
	int i = 0;
	char s[3]; 
	
	while (i < threads)
	{	
		Packet * pack = new Packet();
		pack->id = i;
		pack->shouts = shouts;
		sprintf(s, "%d", i);
		Thread *t = new Thread(s);
		t->Fork(Shout, (int)pack);
		i++;
	}
	
	printf("\n----------------------\n");
	
	currentThread->Finish();
}

void
ThreadTest()
{
    DEBUG('t', "Entering ThreadTest");

    Thread * t = new Thread("forked thread");

	if (task == 1)
	{
		t->Fork(Task1, 1);
	}
	else if (task == 2)
	{
		t->Fork(Task2, 1);
	}

    currentThread->Finish();

	
}

//End code changes by Chet Ransonet

