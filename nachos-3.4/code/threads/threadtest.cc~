// threadtest.cc 
//	Simple test case for the threads assignment.
//
//	Create two threads, and have them context switch
//	back and forth between themselves by calling Thread::Yield, 
//	to illustratethe inner workings of the thread system.
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "synch.h"
#include "string.h"

int task = 0;

//----------------------------------------------------------------------
// SimpleThread
// 	Loop 5 times, yielding the CPU to another ready thread 
//	each iteration.
//
//	"which" is simply a number identifying the thread, for debugging
//	purposes.
//----------------------------------------------------------------------

void
SimpleThread(int which)
{
    int num;
    
    for (num = 0; num < 5; num++) {
	printf("*** thread %d looped %d times\n", which, num);
        currentThread->Yield();
    }
}


//----------------------------------------------------------------------
// ThreadTest
// 	Invoke a test routine.
//----------------------------------------------------------------------


//Begin code changes by Chet Ransonet

/*
void
ThreadTest()
{
    DEBUG('t', "Entering ThreadTest");

    Thread *t = new Thread("forked thread");

    t->Fork(SimpleThread, 1);
    SimpleThread(0);
}
*/

//Begin code changes by Robert Knott
//TypeCheck strips any newline characters and whitespace
const char* TypeCheck(char* thing) {
	const char *inputType;
	char temp[256];
	int tempLength;
	int thingLength = strlen(thing);
	char final[256];

	unsigned int intCount = 0;
	int dotCount = 0;
	bool intFlag = false;
	bool negFlag = false;
	bool deciFlag = false;
	
	//printf("Thing: %s\n", thing);
	//printf("Thing Length: %d\n", thingLength);
	
	//strip newline characters if they exist
	for (int j = 0; j <= thingLength; j++)
	{
		temp[j] = thing[j];
		if(temp[j] == 10)
			temp[j] = 0;
	}
		
	//printf("Temp: %s\n", temp);
	tempLength = strlen(temp);
	//printf("Temp Length: %d\n", tempLength);
	
	//strip whitespace characters if they exist
	int ws_count = 0;
	int k;
	for (k = 0; k <= tempLength; k++)
	{
		final[k-ws_count] = temp[k];
		if(temp[k] == 32)
			ws_count++;
		if(k >= tempLength-1)
			final[k] = 0;
	}
	
	//printf("WS_Count: %d\n", ws_count);
	//printf("K: %d\n", k);
	//printf("Final: %s\n", final);
	unsigned int finalLength = strlen(final);

	int val;
	for(unsigned int i = 0; final[i]; i++)
	{
		val = final[i];
		if (val == 45 && i == 0)
		{
			negFlag = true;
			intCount++;
		}
		if (val == 45 && i != 0)
			negFlag = false;
		  
		if (val >= 48 && val <= 57)
		{
			intCount++;
		}
		if (final[i] == 46 && i != 0 && i != finalLength-1)
		{
		   deciFlag = true;
		   dotCount++;
		   intCount++;
		}
		if ((final[i] == 46 && dotCount > 1) || (final[i] == 46 && final[i+1] == 0))
		{
			deciFlag = false;
			intCount--;
		}
	}
	if (intCount == finalLength)
	{
		intFlag = true;
	}
	
	if (intFlag)
	{
		if(deciFlag)
		{
			if (negFlag)
			{
				inputType = "negative decimal";
			}
			else
			{
				inputType = "decimal";
			}
		}
		else
		{
			if (negFlag)
			{
				inputType = "negative integer";
			}
			else
			{
				inputType = "integer";
			}			
		}
	}
	else
	{ 
		inputType = "character string";
	}

	return inputType;
}

void InputCheck(int num) {
	char thing[256];
	int length = strlen(thing);
	
	for (int i = 0; i <= length; i++)
	{
		thing[i] = 0;
	}
	
	printf("Please enter your input (limit 256 characters): \n");
	fgets(thing, 256, stdin);
	
	// return type of input
	const char* inputType = TypeCheck(thing);
	printf("This is a %s.\n", inputType);
}
//End code changes by Robert Knott


//  Begin code changes by Chet Ransonet

// Packet struct
//  This is just a packet of information to send two ints to a forked thread
//   helps to avoid using global variables
typedef struct Packet
{
	int id;
	int num;
};

// Shout function
// Threads get forked to here to start shouting
void Shout(int pack)
{
	Packet* p = (Packet*)pack;
	int phrase;
	int n = 0;
	while (n < p->num)
	{
		phrase = Random() % 3 + 2;
		n++;
		printf("Thread %i: ", p->id);	

		if (phrase == 0)
			printf("I like trains!");
		else if (phrase == 1)
			printf("The sky is blue!");
		else if (phrase == 2)
			printf("Why are we all shouting?!");
		else if (phrase == 3)
			printf("Shut up!");
		else if (phrase == 4)
			printf("I'm a unique, creative shout!");
		
		printf("\n");

		int cycles = (Random() % 4) + 2;
		int i = 0;

		while(i < cycles)
		{
			currentThread->Yield();
			i++;
		}
	}

	currentThread->Finish();
}

// Task 2: Shouting Threads
void Task2(int num)
{
	int threadCount = 0, shoutCount = 0;
	char  threadNum[256], shoutNum[256];

	printf("How many threads should be created? (integer from 1 - 100,000) ");

	do // loop until correct input is given
	{	
		//Begin code changes by Ben Matkin and Chet Ransonet
		fgets(threadNum, 256, stdin);
		threadCount = atoi(threadNum);
		if(TypeCheck(threadNum) == "integer" && threadCount <= 100000)
			break;
		
		printf("Invalid Input!  Please try again.\n");		
		//End code changes by Ben Matkin and Chet Ransonet
	} 
	while (true);

	printf("How many times each shout? (integer from 1 - 500) ");
	
	do // loop until correct input is given
	{	
		//Begin code changes by Ben Matkin and Chet Ransonet
		fgets(shoutNum, 256, stdin);
		shoutCount = atoi(shoutNum);
		if(TypeCheck(shoutNum) == "integer" && shoutCount <= 500)
			break;
		
		printf("Invalid Input!  Please try again.\n");		
		//End code changes by Ben Matkin and Chet Ransonet
	} 
	while (true);
	
	int i = 0;
	char s[3]; 
	
	// loop through the number of threads specified and fork each one to Shout
	while (i < threadCount)
	{	
		Packet * pack = new Packet();
		pack->id = i; // send id number of this thread
		pack->num = shoutCount;	// send number of times to shout
		sprintf(s, "%d", i);
		Thread *t = new Thread(s);
		t->Fork(Shout, (int)pack);
		i++;
	}
	
	printf("\n----------------------\n");
	
	currentThread->Finish();
}

////////////////////////////////////////////////////////////////////////////////
// PROJECT 2

// Begin code changes by Chet Ransonet

// Dining Philosopher global variables
int mealCount = 0, waiting = 0, sitting = 0, done = 0;
bool chopsticks[100], waiter = false;

// function used for philosophers' thinking/eating cycles
void Think()
{
	int cycles = Random() % 4 + 2;
	int i = 0;
	while(i < cycles)
	{
		currentThread->Yield();
		i++;
	}
}

// End code changes by Chet Ransonet

// Begin code changes by Chet Ransonet

// Philosopher function for Dining Philosophers (Busy Waiting)
void Philosopher1(int pack)
{
	Packet* p = (Packet*)pack;
	
	//unpack p
	int id = p->id, philos = p->num;

	// left = index of left chopstick, right = index of right chopstick
	int left = id, right = (id+1)%philos;

	printf("Philosopher %i arrives, waiting to sit...\n", id);
	waiting++;

	// wait for all philosophers to arrive
	while (waiting < philos)
		currentThread->Yield();

	printf(">Philosopher %i sits, waiting to eat...\n", id);
	sitting++;

	// wait for all philosophers to sit
	while (sitting < philos)
		currentThread->Yield();

	while (mealCount > 0)
	{
		// attempt to grab chopsticks
		while (waiter)
		{
			if (mealCount == 0) break;
			currentThread->Yield();
		}
		if (mealCount == 0) break;

		waiter = true;

		// wait for left chipstick
		while (chopsticks[left])
		{
			if (mealCount == 0) break;
			currentThread->Yield();
		}
		if (mealCount == 0) break;

		//grab left chopstick
		chopsticks[left] = true;
		printf(">>Philosopher %i picks up Chopstick %i on his left.\n", id, left);
 
		// wait for right chopstick
		while(chopsticks[right])
		{
			if (mealCount == 0) break;
			if (philos == 1) break;
			currentThread->Yield();
		}
		if (mealCount == 0) break;

		//grab right chopstick
		chopsticks[right] = true;
		printf(">>Philosopher %i picks up Chopstick %i on his right.\n", id, right);

		waiter = false;

		mealCount--;
		printf(">>>Philosopher %i begins eating.  mealCount Left: %i\n", id, mealCount);
		Think();

		printf(">>>>Philosopher %i drops Chopstick %i on his left.\n", id, left);
		chopsticks[left] = false;

		printf(">>>>Philosopher %i drops Chopstick %i on his right.\n", id, right);
		chopsticks[right] = false;	

		printf(">>>>>Philosopher %i begins thinking...\n", id);
		Think();
	}

	printf(">>>>>>Philosopher %i is ready to leave...\n", id);
	done++;

	while(done < philos)
		currentThread->Yield();

	printf(">>>>>>>Philosopher %i leaves.\n", id);

	currentThread->Finish();
}
// End code changes by Chet Ransonet

// Begin code changes by Chet Ransonet

//Project 2 Task 1: Dining Philosophers (Busy Waiting)
void Task3(int num)
{
	int philosCount;
	char philosNum[256], mealNum[256];

	printf("Project 2, Task 1: Dining Philosophers (Busy Waiting)\n");

	printf("\n----------------------\n");
	printf("How many philosophers?  (Max: 100)  ");
	
	do // loop until correct input is given
	{
		fgets(philosNum, 256, stdin);
		philosCount = atoi(philosNum);
		if(TypeCheck(philosNum) == "integer" && philosCount <= 100)
			break;
		
		printf("Invalid Input!  Please try again.\n");
	} 
	while (true);
	
	printf("\n----------------------\n");
	printf("How many meals?  ");
	do // loop until correct input is given
	{	
		
		fgets(mealNum, 256, stdin);
		mealCount = atoi(mealNum);
		if(TypeCheck(mealNum) == "integer")
			break;
		
		printf("Invalid Input!  Please try again.\n");
	} 
	while (true);
	
	int i = 0;
	char s[3]; 

	while (i < philosCount)
	{	
		Packet * pack = new Packet();
		pack->id = i;	// send id of this philosopher
		pack->num = philosCount;   // send total number of philosophers
		sprintf(s, "%d", i);
		Thread *t = new Thread(s);
		t->Fork(Philosopher1, (int)pack);
		i++;
	}
	
	currentThread->Finish();
}

// End code changes by Chet Ransonet

// Begin code changes by Chet Ransonet

Semaphore ** chopstickSema;
Semaphore * wait;
Semaphore * seatWait;
Semaphore * leaveWait;
int arrived=0, seated=0, waitToLeave=0;

// Philosopher function for Dining Philosophers (Semaphores)
void Philosopher2(int pack)
{
	Packet* p = (Packet*)pack;
	
	int id = p->id, philos = p->num;

	int left = id, right = (id+1)%philos;
	
	printf("Philosopher %i arrives, waiting to sit...\n", id);
	
	//wait for all philosophers to arrive
	arrived++;  //increment arrived
	if(arrived < philos)  //if arrived is less than the total number of philosophers
	{
		wait->P();  //make current philosopher wait
	}
	wait->V(); //signal the philosopher to move on
	
	printf(">Philosopher %i sits, waiting to eat...\n", id);

	//wait for all philosophers to sit
	seated++;  //increment seated
	if(seated < philos)  //if seated is less than the total number of philosophers
	{
		seatWait->P();  //make the current philosopher wait
	}
	seatWait->V(); //signal the philosopher to move on


	while (mealCount > 0)
	{
		// wait for left chipstick
		chopstickSema[left]->P();

		//grab left chopstick
		printf(">>Philosopher %i picks up Chopstick %i on his left.\n", id, left);

		// wait for right chopstick
		chopstickSema[right]->P();

		//grab right chopstick
		printf(">>Philosopher %i picks up Chopstick %i on his right.\n", id, right);

		if(mealCount > 0)
		{
			mealCount--;
			printf(">>>Philosopher %i begins eating.  mealCount Left: %i\n", id, mealCount);
			Think();
		}

		printf(">>>>Philosopher %i drops Chopstick %i on his left.\n", id, left);
		chopstickSema[left]->V();

		printf(">>>>Philosopher %i drops Chopstick %i on his right.\n", id, right);
		chopstickSema[right]->V();

		printf(">>>>>Philosopher %i begins thinking...\n", id);
		Think();
	}

	printf(">>>>>>Philosopher %i is ready to leave...\n", id);

	//wait for all philosophers to be ready to leave
	waitToLeave++;  //increment 
	if(waitToLeave < philos)  //if waitToLeave is less than the total number of philosophers
	{
		leaveWait->P();  //make the current philosopher wait
	}
	leaveWait->V(); //signal the philosopher to leave

	printf(">>>>>>>Philosopher %i leaves.\n", id);

	currentThread->Finish();
}

// Project 2 Task 2
void Task4(int num)
{ 
	int philosCount;
	char philosNum[256], mealNum[256];

	printf("Project 2, Task 2: Dining Philosophers (Semaphores)\n");

	printf("\n----------------------\n");
	printf("How many philosophers?  (Max: 100)  ");

	do // loop until correct input is given
	{
		fgets(philosNum, 256, stdin);
		philosCount = atoi(philosNum);
		if(TypeCheck(philosNum) == "integer" && philosCount <= 100)
			break;
		
		printf("Invalid Input!  Please try again.\n");
	} 
	while (true);
	
	//initialize the value of the waiting semaphore
	wait = new Semaphore("", 0);
	seatWait = new Semaphore("", 0);
	leaveWait = new Semaphore("", 0);

	// size the semaphore array based on the number of philosophers
	chopstickSema = new Semaphore* [philosCount];
	for (int i=0; i<philosCount; i++)
	{
		chopstickSema[i] = new Semaphore("", 1);
	}

	printf("\n----------------------\n");
	printf("How many meals?  ");
	do // loop until correct input is given
	{	
		
		fgets(mealNum, 256, stdin);
		mealCount = atoi(mealNum);
		if(TypeCheck(mealNum) == "integer")
			break;
		
		printf("Invalid Input!  Please try again.\n");
	} 
	while (true);
	
	int i = 0;
	char s[3]; 

	while (i < philosCount)
	{	
		Packet * pack = new Packet();
		pack->id = i;	// send id of this philosopher
		pack->num = philosCount;   // send total number of philosophers
		sprintf(s, "%d", i);
		Thread *t = new Thread(s);
		t->Fork(Philosopher2, (int)pack);
		i++;
	}
	
	currentThread->Finish();
}
// End code changes by Chet Ransonet

int totalMessages, MaxMessages, peopleCount;
Semaphore ** mailboxSema;
Semaphore * messageNum;

struct Message
{
	int sender, msg;
};

Message mailboxarray[99][99];

char * showMessage(int x)
{	
	if (x == 1)
	{
		return "The sky is blue!";
	}
	else if (x == 2)
	{		
		return "Here's a message!";
	}	
	else if (x == 3)
	{
		return "Stop sending me messages!";
	}
	else if (x == 4)
	{
		return "I'm a unique, creative message!";
	}
	else if (x == 5)
	{
		return "You've got mail!";
	}
	else //if (x == 6)
	{
		return "I'm a creative, unique message!";
	}
}

// Begin code changes by Ryan Mazerole and Chet Ransonet
void Person1(int id)
{
	int sendTo, waitCount = 0;

	Message * outMsg = new Message();

	while (true)
	{
		//Step 1: Enter post office
		printf(">Person %i enters the post office...\n", id);

		//Step 2: Read a message
		mailboxSema[id]->P();

		for(int i = 0; i < MaxMessages; i++)
		{
			if(mailboxarray[id][i].msg != 0)
			{
				// read the messages then break	
			 	printf(">>Person %i reads the message from Person %i: '%s'\n", id, mailboxarray[id][i].sender, showMessage(mailboxarray[id][i].msg));
				mailboxarray[id][i].msg = 0;
				mailboxarray[id][i].sender = -1;
				currentThread->Yield();  //Step 3: Yield
			}
			
		}

		mailboxSema[id]->V();

		// check if there are messages to send
		if (totalMessages > 0)
		{
			//Step 5: Compose message
			// pick random recipient, ensure it's not the sender
			do {
				sendTo = Random() % peopleCount;
			} while (sendTo == id);
			outMsg->sender = id;
			outMsg->msg = Random() % 6 + 1;

			printf(">>>Person %i wants to send '%s' to Person %i.\n", id, showMessage(outMsg->msg), sendTo);

			//Step 6: Attempt to send message
			mailboxSema[sendTo]->P();

			for(int i=0; i<MaxMessages; i++)
			{
				if (mailboxarray[sendTo][i].msg == 0)
				{
					// mailbox not full, insert message
					mailboxarray[sendTo][i].sender = id; //id just an int
					mailboxarray[sendTo][i].msg = outMsg->msg;

					messageNum->P();
					totalMessages -= 1;
					messageNum->V();

					printf(">>>>Person %i sends '%s' to Person %i..... Messages Left: %i\n", id, showMessage(outMsg->msg), sendTo, totalMessages);

					break;
				}
				else if (i == MaxMessages - 1)
				{
					// no empty spots, wait for one
					i = 0;
					waitCount++;
					if (waitCount == 3)
					{
						printf();
						break;
					}
					currentThread->Yield();
				}
					
			}

			mailboxSema[sendTo]->V();
		}
		else
		{
			printf(">>>>>Person%i leaves.\n", id); //Step 8
			break;
		}

		printf(">>>>>>Person %i leaves.\n", id);
		Think();
	}

	currentThread->Finish();
	
}
// End code changes by Ryan Mazerole and Chet Ransonet

void Task5(int num)
{     
	char numPeople[256], maxMessages[256], sentMessages[256];
	
	printf("Enter number of peopleCount entering post office: (2-100)");
	do // loop until correct input is given
	{
		fgets(numPeople, 256, stdin);
		peopleCount = atoi(numPeople);
		if(TypeCheck(numPeople) == "integer" && peopleCount > 1 && peopleCount <= 100)
			break;
		
		printf("Invalid Input!  Please try again.\n");
	} 
	while (true);

	printf("Enter max slots of the mailboxes: ");
	do // loop until correct input is given
	{
		fgets(maxMessages, 256, stdin);
		MaxMessages = atoi(maxMessages);
		if(TypeCheck(maxMessages) == "integer" && MaxMessages <= 100)
			break;
		
		printf("Invalid Input!  Please try again.\n");
	} 
	while (true);

	printf("Enter number of messages that must be sent: ");
	do // loop until correct input is given
	{
		fgets(sentMessages, 256, stdin);
		totalMessages = atoi(sentMessages);
		if(TypeCheck(sentMessages) == "integer" && totalMessages <= 100)
			break;
		
		printf("Invalid Input!  Please try again.\n");
	} 
	while (true);
	
	messageNum = new Semaphore("", 1);

	mailboxSema = new Semaphore* [peopleCount];
	for (int i=0; i<peopleCount; i++)
	{
		mailboxSema[i] = new Semaphore("", 1);
	}

	int i = 0;
	char s[5];

	printf("\n------------\n");

	while (i < peopleCount)
	{	
		sprintf(s, "%d", i);
		Thread *t = new Thread(s);
		t->Fork(Person1, i);
		i++;
	}
	
	currentThread->Finish();
}

void Task6(int num)
{
	
}


// ThreadTest
void
ThreadTest()
{
    DEBUG('t', "Entering ThreadTest");

    Thread * t = new Thread("forked thread");

	if (task == 1)
		t->Fork(InputCheck, 1);
	else if (task == 2)
		t->Fork(Task2, 1);
	else if (task == 3)
		t->Fork(Task3, 1);
	else if (task == 4)
		t->Fork(Task4, 1);
	else if (task == 5)
		t->Fork(Task5, 1);
	else if (task == 6)
		t->Fork(Task6, 1);

    currentThread->Finish();

	
}

//End code changes by Chet Ransonet

